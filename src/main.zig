const std = @import("std");
const avro = @import("reader.zig");

pub fn main() !void {
    var timer = try std.time.Timer.start();
    std.debug.print("Start\n", .{});
    const start = timer.lap();
    var i: usize = 0;
    while (i < 100_000_000) : (i += 1) {
        var x: Incident = undefined;
        _ = try avro.read(Incident, &x, payload[5..]);
    }
    const end = timer.lap();

    std.debug.print("time: {}\n", .{(end - start) / 1_000_000});
}

pub const Incident = struct {
    id: []const u8,
    masterId: union(enum) { none, val: []const u8 },
    eventId: []const u8,
    participantId: union(enum) { none, val: []const u8 },
    referencedParticipantId: union(enum) { none, val: []const u8 },
    sportType: enum { FOOTBALL, ICE_HOCKEY, UNDEFINED },
    sportSpecifics: union(enum) { none, val: []const u8 },
    incidentType: enum { REGULAR_GOAL, UNDEFINED },
    elapsedTime: union(enum) { none, val: i32 },
    sortOrder: union(enum) { none, val: i32 },
    deleted: bool,
    tsConnectorIn: union(enum) { none, val: i64 },
    tsConnectorOut: union(enum) { none, val: i64 },
    connectorId: union(enum) { none, val: []const u8 },
    tsAdminIn: union(enum) { none, val: i64 },
    tsAdminOut: union(enum) { none, val: i64 },
    properties: avro.Map([]const u8),
};

test "incident" {
    var i: Incident = undefined;
    _ = try avro.read(Incident, &i, payload[5..]);

    try std.testing.expectEqualStrings("ba1826b3-8da4-5df5-9ba7-58db4c1a059a", i.id);
    try std.testing.expectEqualStrings("8e5a8fb1-1c88-4d75-b1a3-9783f9f801ba", i.eventId);
    try std.testing.expectEqualStrings("39ff76de-b0e7-4660-bb43-9d935a7cde87", i.participantId.val);
    try std.testing.expectEqualStrings("708c2db5-c014-47ff-ad1d-b9f7eb7f2eb1", i.referencedParticipantId.val);

    switch (i.connectorId) {
        .none => try std.testing.expect(true),
        .val => try std.testing.expect(false),
    }

    switch (i.masterId) {
        .none => try std.testing.expect(true),
        .val => try std.testing.expect(false),
    }

    switch (i.sportSpecifics) {
        .none => try std.testing.expect(true),
        .val => try std.testing.expect(false),
    }

    try std.testing.expectEqual(1253, i.elapsedTime.val);
    try std.testing.expectEqual(6, i.sortOrder.val);
    try std.testing.expectEqual(.UNDEFINED, i.incidentType); // I don't have the full enum yet
    try std.testing.expect(!i.deleted);

    try std.testing.expectEqual(1729365911699858977, i.tsAdminIn.val);
    try std.testing.expectEqual(1729365911718795206, i.tsAdminOut.val);

    while (try i.properties.next()) |val| {
        if (std.mem.eql(u8, val.key, "ENETPULSE:player_name")) {
            try std.testing.expectEqualStrings("Jannik Froewis", val.value);
        }
    }
}

const payload = [_]u8{
    0,
    0,
    0,
    0,
    171,
    72,
    98,
    97,
    49,
    56,
    50,
    54,
    98,
    51,
    45,
    56,
    100,
    97,
    52,
    45,
    53,
    100,
    102,
    53,
    45,
    57,
    98,
    97,
    55,
    45,
    53,
    56,
    100,
    98,
    52,
    99,
    49,
    97,
    48,
    53,
    57,
    97,
    0,
    72,
    56,
    101,
    53,
    97,
    56,
    102,
    98,
    49,
    45,
    49,
    99,
    56,
    56,
    45,
    52,
    100,
    55,
    53,
    45,
    98,
    49,
    97,
    51,
    45,
    57,
    55,
    56,
    51,
    102,
    57,
    102,
    56,
    48,
    49,
    98,
    97,
    2,
    72,
    51,
    57,
    102,
    102,
    55,
    54,
    100,
    101,
    45,
    98,
    48,
    101,
    55,
    45,
    52,
    54,
    54,
    48,
    45,
    98,
    98,
    52,
    51,
    45,
    57,
    100,
    57,
    51,
    53,
    97,
    55,
    99,
    100,
    101,
    56,
    55,
    2,
    72,
    55,
    48,
    56,
    99,
    50,
    100,
    98,
    53,
    45,
    99,
    48,
    49,
    52,
    45,
    52,
    55,
    102,
    102,
    45,
    97,
    100,
    49,
    100,
    45,
    98,
    57,
    102,
    55,
    101,
    98,
    55,
    102,
    50,
    101,
    98,
    49,
    4,
    0,
    198,
    1,
    2,
    202,
    19,
    2,
    12,
    0,
    0,
    0,
    0,
    2,
    194,
    152,
    209,
    216,
    202,
    200,
    248,
    255,
    47,
    2,
    140,
    223,
    216,
    234,
    202,
    200,
    248,
    255,
    47,
    11,
    160,
    3,
    42,
    69,
    78,
    69,
    84,
    80,
    85,
    76,
    83,
    69,
    58,
    112,
    108,
    97,
    121,
    101,
    114,
    95,
    110,
    97,
    109,
    101,
    28,
    74,
    97,
    110,
    110,
    105,
    107,
    32,
    70,
    114,
    111,
    101,
    119,
    105,
    115,
    44,
    69,
    78,
    69,
    84,
    80,
    85,
    76,
    83,
    69,
    58,
    101,
    108,
    97,
    112,
    115,
    101,
    100,
    95,
    112,
    108,
    117,
    115,
    2,
    48,
    24,
    69,
    78,
    69,
    84,
    80,
    85,
    76,
    83,
    69,
    58,
    105,
    100,
    72,
    98,
    97,
    49,
    56,
    50,
    54,
    98,
    51,
    45,
    56,
    100,
    97,
    52,
    45,
    53,
    100,
    102,
    53,
    45,
    57,
    98,
    97,
    55,
    45,
    53,
    56,
    100,
    98,
    52,
    99,
    49,
    97,
    48,
    53,
    57,
    97,
    36,
    69,
    78,
    69,
    84,
    80,
    85,
    76,
    83,
    69,
    58,
    105,
    110,
    99,
    105,
    100,
    101,
    110,
    116,
    16,
    49,
    49,
    57,
    53,
    54,
    48,
    53,
    54,
    36,
    69,
    78,
    69,
    84,
    80,
    85,
    76,
    83,
    69,
    58,
    112,
    108,
    97,
    121,
    101,
    114,
    70,
    75,
    14,
    49,
    49,
    56,
    57,
    54,
    54,
    57,
    38,
    69,
    78,
    69,
    84,
    80,
    85,
    76,
    83,
    69,
    58,
    116,
    105,
    109,
    101,
    115,
    116,
    97,
    109,
    112,
    40,
    50,
    48,
    50,
    52,
    45,
    49,
    48,
    45,
    49,
    57,
    84,
    49,
    56,
    58,
    51,
    49,
    58,
    50,
    49,
    90,
    0,
};
